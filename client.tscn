[gd_scene load_steps=3 format=3 uid="uid://ccvs7tbihui6m"]

[ext_resource type="Script" path="res://UI/reconnect.gd" id="1_mnfxb"]

[sub_resource type="GDScript" id="GDScript_83sxv"]
script/source = "extends Control

@export var count_down: int = 30
@export var connection_reset: int = 3
@export var max_tries: int = 100

const MapScene = preload(\"res://Maps/debug_map.tscn\")


func _ready():
	$ConnectionUI/Reconnect.timeout.connect(try_reconnect)
	var args = Array(OS.get_cmdline_args())
	if args.has(\"-s\") or DisplayServer.get_name() == \"headless\":
		call_deferred(\"start_server\")
	else:
		if args.has(\"-i\"):
			call_deferred(\"start_integrated\")
		else:
			call_deferred(\"start_client\")


func change_map(scene: PackedScene):
	var map = $Map
	# Clean out everything
	for child in map.get_children():
		map.remove_child(child)
		child.queue_free()
	map.add_child(scene.instantiate())


# setup the client part of a network peer
func prepare_client(peer):
	print(\"Preparing Client\")
	var client = peer.create_client(\"127.0.0.1\", 10000)
	if not client == MultiplayerPeer.CONNECTION_CONNECTED:
		$ConnectionUI/RichTextLabel.text = \"[center]Failed to connect...\"
		$ConnectionUI/RichTextLabel.fit_content = true
		retry_client();
		return false
	print(peer.get_connection_status())
	return true


# setup the server part of a peer
func prepare_server(peer):
	print(\"Preparing Server\")
	peer.create_server(10000, 10)
	if peer.get_connection_status() == MultiplayerPeer.CONNECTION_DISCONNECTED:
		print(\"Server failed to start\")
	return true


# launch a standalone client
func start_client():
	var peer = ENetMultiplayerPeer.new()
	if not prepare_client(peer):
		return
	start_game(peer)


# launch a standalone server
func start_server():
	var peer = ENetMultiplayerPeer.new()
	if not prepare_server(peer):
		return
	start_game(peer)


# launch a client and a server at the same time
func start_integrated():
	var peer = ENetMultiplayerPeer.new()
	if not prepare_server(peer):
		prepare_client(peer)
	start_game(peer)

func retry_client():
	$ConnectionUI/Reconnect.wait_time = connection_reset
	$ConnectionUI/Reconnect.start()


# actually start the game logic
func start_game(peer):
	print(\"Starting Game\")
	multiplayer.multiplayer_peer = peer
	$ConnectionUI.hide()
	if multiplayer.is_server():
		change_map.call_deferred(MapScene)


func _input(event):
	if event.is_action_released(\"ui_page_up\"):
		var ext = \"bat\"
		if not OS.get_name().to_lower() == \"windows\":
			ext = \"sh\"
		OS.shell_open(ProjectSettings.globalize_path(\"res://\") + \"./run.\")


func try_reconnect():
	print_debug(\"Trying to connect...\")
	$ConnectionUI/Reconnect.stop()
	max_tries -= 1
	if max_tries <=0:
		get_tree().quit()
	start_client()
"

[node name="Client" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_83sxv")

[node name="ConnectionUI" type="Control" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="RetryText" type="RichTextLabel" parent="ConnectionUI"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -184.0
offset_top = 23.0
offset_right = 184.0
offset_bottom = 68.0
grow_horizontal = 2
grow_vertical = 2
bbcode_enabled = true

[node name="RichTextLabel" type="RichTextLabel" parent="ConnectionUI"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -177.5
offset_top = -20.0
offset_right = 177.5
offset_bottom = 20.0
grow_horizontal = 2
grow_vertical = 2
bbcode_enabled = true
text = "[center]Connecting To Server[/center]"

[node name="Reconnect" type="Timer" parent="ConnectionUI"]
script = ExtResource("1_mnfxb")

[node name="Map" type="Node3D" parent="."]

[node name="MapSpawner" type="MultiplayerSpawner" parent="."]
_spawnable_scenes = PackedStringArray("res://Maps/debug_map.tscn")
spawn_path = NodePath("../Map")
spawn_limit = 1
